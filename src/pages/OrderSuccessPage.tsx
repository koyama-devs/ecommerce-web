import {
    Alert,
    Box,
    Button,
    Container,
    Divider,
    Grid,
    Paper,
    Stack,
    Typography,
} from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import type { InvoiceData } from "../components/CheckoutButton";
import { generateInvoicePDF } from "../components/CheckoutButton";

export default function OrderSuccessPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const invoiceData = location.state as InvoiceData | null;

  if (!invoiceData) {
    return (
      <Container sx={{ py: 4 }}>
        <Typography align="center" color="error">
          Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h√≥a ƒë∆°n.
        </Typography>
      </Container>
    );
  }

  const formattedPrice = (price: number) =>
    new Intl.NumberFormat("ja-JP", {
      style: "currency",
      currency: "JPY",
    }).format(Math.round(price));

  const handleDownloadPDF = async () => {
    const blob = await generateInvoicePDF(invoiceData);
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `invoice-${invoiceData.invoice.invoiceNumber}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Container sx={{ py: 4 }}>
      <Box textAlign="center">
        <Alert
          severity="success"
          sx={{
            fontSize: "1.05rem",
            p: 2,
            mb: 3,
            backgroundColor: "#e6f4ea",
            color: "#2e7d32",
            fontWeight: "bold",
          }}
        >
          Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng.
        </Alert>

        <Paper
          elevation={3}
          sx={{
            p: 3,
            maxWidth: 900,
            mx: "auto",
            textAlign: "left",
            borderRadius: 2,
          }}
        >
          {/* Header */}
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={12} sm={6}>
              <Typography variant="h6" sx={{ fontWeight: "bold" }}>
                {invoiceData.store.name}
              </Typography>
              <Typography>{invoiceData.store.address}</Typography>
              <Typography>
                ƒêT: {invoiceData.store.phone} | Email: {invoiceData.store.email}
              </Typography>
              {invoiceData.store.taxId && (
                <Typography>MST: {invoiceData.store.taxId}</Typography>
              )}
            </Grid>
            <Grid
              item
              xs={12}
              sm={6}
              sx={{ textAlign: { xs: "left", sm: "right" } }}
            >
              <Typography variant="h5" sx={{ fontWeight: "bold" }}>
                H√ìA ƒê∆†N
              </Typography>
              <Typography>S·ªë Hƒê: {invoiceData.invoice.invoiceNumber}</Typography>
              <Typography>Ng√†y: {invoiceData.invoice.date}</Typography>
              <Typography>M√£ ƒë∆°n: {invoiceData.invoice.orderId}</Typography>
              <Typography>
                Thanh to√°n: {invoiceData.invoice.paymentMethod}
              </Typography>
              <Typography>
                Tr·∫°ng th√°i: {invoiceData.invoice.paymentStatus}
              </Typography>
            </Grid>
          </Grid>

          {/* Customer */}
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={12} sm={6}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Th√¥ng tin kh√°ch h√†ng
              </Typography>
              <Typography>H·ªç t√™n: {invoiceData.customer.name}</Typography>
              {invoiceData.customer.phone && (
                <Typography>ƒêi·ªán tho·∫°i: {invoiceData.customer.phone}</Typography>
              )}
              {invoiceData.customer.email && (
                <Typography>Email: {invoiceData.customer.email}</Typography>
              )}
              {invoiceData.customer.shippingAddress && (
                <Typography>
                  ƒê/c giao h√†ng: {invoiceData.customer.shippingAddress}
                </Typography>
              )}
              {invoiceData.customer.customerId && (
                <Typography>M√£ KH: {invoiceData.customer.customerId}</Typography>
              )}
            </Grid>
          </Grid>

          {/* Items */}
          <Divider sx={{ my: 2 }} />
          <Typography
            variant="subtitle1"
            sx={{ fontWeight: "bold", mb: 1 }}
          >
            Chi ti·∫øt s·∫£n ph·∫©m
          </Typography>
          {invoiceData.items.map((item, idx) => (
            <Stack
              key={idx}
              direction="row"
              justifyContent="space-between"
              sx={{ mb: 0.5 }}
            >
              <Typography>
                {idx + 1}. {item.name} (x{item.quantity})
              </Typography>
              <Typography>
                {formattedPrice(item.price * item.quantity)}
              </Typography>
            </Stack>
          ))}

          {/* Summary */}
          <Divider sx={{ my: 2 }} />
          <Box sx={{ maxWidth: 360, ml: "auto" }}>
            <Stack
              direction="row"
              justifyContent="space-between"
              sx={{ mb: 0.5 }}
            >
              <Typography>T·ªïng gi√° tr·ªã s·∫£n ph·∫©m:</Typography>
              <Typography>
                {formattedPrice(invoiceData.totals.subtotal)}
              </Typography>
            </Stack>
            <Stack
              direction="row"
              justifyContent="space-between"
              sx={{ mb: 0.5 }}
            >
              <Typography>
                Thu·∫ø
                {invoiceData.totals.vatRate
                  ? ` (${Math.round(invoiceData.totals.vatRate * 100)}%)`
                  : ""}
                :
              </Typography>
              <Typography>{formattedPrice(invoiceData.totals.tax)}</Typography>
            </Stack>
            <Stack
              direction="row"
              justifyContent="space-between"
              sx={{ mb: 0.5 }}
            >
              <Typography>Ph√≠ v·∫≠n chuy·ªÉn:</Typography>
              <Typography>
                {formattedPrice(invoiceData.totals.shippingFee)}
              </Typography>
            </Stack>
            <Stack
              direction="row"
              justifyContent="space-between"
              sx={{ mb: 0.5 }}
            >
              <Typography>Gi·∫£m gi√°:</Typography>
              <Typography>
                -{formattedPrice(invoiceData.totals.discount)}
              </Typography>
            </Stack>

            <Divider sx={{ my: 1 }} />
            <Stack direction="row" justifyContent="space-between">
              <Typography fontWeight="bold">T·ªîNG C·ªòNG:</Typography>
              <Typography fontWeight="bold" color="primary">
                {formattedPrice(invoiceData.totals.grandTotal)}
              </Typography>
            </Stack>
          </Box>

          {/* Extras */}
          <Divider sx={{ my: 2 }} />
          <Typography variant="subtitle1" sx={{ fontWeight: "bold" }}>
            ƒêi·ªÅu kho·∫£n & ch√≠nh s√°ch ƒë·ªïi tr·∫£
          </Typography>
          <Typography sx={{ mb: 1 }}>
            {invoiceData.extras?.terms ||
              "‚Äª ƒê·ªïi tr·∫£ trong 7 ng√†y v·ªõi s·∫£n ph·∫©m c√≤n nguy√™n tem/m√°c theo ch√≠nh s√°ch c·ªßa c·ª≠a h√†ng."}
          </Typography>
          <Typography variant="subtitle1" sx={{ fontWeight: "bold" }}>
            L·ªùi c·∫£m ∆°n
          </Typography>
          <Typography sx={{ mb: 2 }}>
            {invoiceData.extras?.thanksNote ||
              "C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ mua h√†ng! H·∫πn g·∫∑p l·∫°i qu√Ω kh√°ch trong nh·ªØng ƒë∆°n h√†ng ti·∫øp theo."}
          </Typography>

          <Stack spacing={2}>
            <Button
              fullWidth
              variant="outlined"
              onClick={handleDownloadPDF}
              sx={{
                borderColor: "primary.main",
                color: "primary.main",
                fontWeight: "bold",
                "&:hover": {
                  bgcolor: "primary.main",
                  color: "white",
                  borderColor: "primary.main",
                },
              }}
            >
              üìÑ T·∫£i h√≥a ƒë∆°n (PDF)
            </Button>

            {/* N√∫t m·ªõi quay v·ªÅ trang ch·ªß */}
            <Button
              fullWidth
              variant="contained"
              color="primary"
              onClick={() => navigate("/")}
              sx={{ fontWeight: "bold" }}
            >
              ‚¨ÖÔ∏è Quay v·ªÅ trang ch·ªß
            </Button>
          </Stack>
        </Paper>
      </Box>
    </Container>
  );
}
